model Article {
  id          String       @id @default(uuid())
  title       String
  description String?
  tags        ArticleTag[]
  comments    Comment[]
  likes       Like[]
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])
}

model ArticleTag {
  id        String @id @default(uuid())
  articleId String
  tagId     String

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([articleId, tagId])
}

model Comment {
  id        String  @id @default(uuid())
  content   String?
  authorId  String
  articleId String

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model Like {
  id        String   @id @default(uuid())
  authorId  String   @unique
  articleId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String       @id @default(uuid())
  tag       String
  articles  ArticleTag[]
  createAt  DateTime     @default(now())
  updatedAt DateTime     @default(now())
}

model User {
  id        String    @id @default(uuid())
  name      String?
  email     String    @unique
  password  String?
  articles  Article[]
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

